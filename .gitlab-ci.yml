stages:
  - build
  - test
  - release
  - deploy

.Build JAR template:
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"'
  script:
    - mvn deploy -s ci_settings.xml

Build latest JAR for Java 11:
  image: registry.hpc.ut.ee/mirror/library/maven:3.6-jdk-11
  extends: .Build JAR template

Release artifact for Java 11:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
  script:
    - apk update
    - apk add openjdk11 maven
    - echo $CI_COMMIT_TAG
    - mvn -Drevision=${CI_COMMIT_TAG} clean install
  artifacts:
    paths:
      - "target/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.jar"
    expire_in: never
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "$CI_COMMIT_TAG_MESSAGE"
    assets:
      links:
        - name: "JAR"
          url: "https://code.opennodecloud.com/$CI_PROJECT_PATH/-/jobs/$CI_JOB_ID/artifacts/download"

Upload docs:
  image:
    name: registry.hpc.ut.ee/mirror/alpine/git:v2.30.2
    entrypoint: [""]
  stage: deploy
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'
  script:
    - cd /tmp/
    - git clone "https://gitlab-ci-token:$GITLAB_TOKEN@$CI_SERVER_HOST/waldur/waldur-docs.git"
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - cd waldur-docs/
    - ls docs/integrations/waldur-keycloak-mapper || mkdir docs/integrations/waldur-keycloak-mapper
    - cp -v $CI_PROJECT_DIR/README.md docs/integrations/waldur-keycloak-mapper
    - git add docs/integrations/waldur-keycloak-mapper
    - git commit -m 'Update Waldur keycloak mapper docs' || exit 0
    - git branch new-keycloak-mapper-docs
    - git push --set-upstream origin new-keycloak-mapper-docs:master
